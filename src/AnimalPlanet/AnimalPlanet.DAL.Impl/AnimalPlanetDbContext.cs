using AnimalPlanet.DAL.Entities.Tables;
using AnimalPlanet.DAL.Entities.Tables.Identity;

using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace AnimalPlanet.DAL.Impl
{
    public sealed class AnimalPlanetDbContext : IdentityDbContext<User, Role, int>
    {
        public AnimalPlanetDbContext(DbContextOptions<AnimalPlanetDbContext> options)
            : base(options)
        {

        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            #region keys

            modelBuilder.Entity<ReserveSpecie>()
                .HasKey(e => new { e.ReserveId, e.SpecieId });

            modelBuilder.Entity<NaturalAreaSpecie>()
                .HasKey(e => new { e.NaturalAreaId, e.SpecieId });

            // int key is autogenerated in EF core

            modelBuilder.Entity<Phylum>()
                .HasKey(e => e.Id);

            modelBuilder.Entity<Class>()
                .HasKey(e => e.Id);

            modelBuilder.Entity<Order>()
                .HasKey(e => e.Id);

            modelBuilder.Entity<Family>()
                .HasKey(e => e.Id);

            modelBuilder.Entity<Genus>()
                .HasKey(e => e.Id);

            modelBuilder.Entity<Specie>()
                .HasKey(e => e.Id);

            modelBuilder.Entity<Reserve>()
                .HasKey(e => e.Id);

            modelBuilder.Entity<NaturalArea>()
                .HasKey(e => e.Id);

            #endregion

            #region unique denominations

            modelBuilder.Entity<Phylum>()
                .HasIndex(e => e.Denomination)
                .IsUnique(true);

            modelBuilder.Entity<Class>()
                .HasIndex(e => e.Denomination)
                .IsUnique(true);

            modelBuilder.Entity<Order>()
                .HasIndex(e => e.Denomination)
                .IsUnique(true);

            modelBuilder.Entity<Family>()
                .HasIndex(e => e.Denomination)
                .IsUnique(true);

            modelBuilder.Entity<Genus>()
                .HasIndex(e => e.Denomination)
                .IsUnique(true);

            modelBuilder.Entity<Specie>()
                .HasIndex(e => e.Denomination)
                .IsUnique(true);

            modelBuilder.Entity<NaturalArea>()
                .HasIndex(e => e.Denomination)
                .IsUnique(true);

            modelBuilder.Entity<Reserve>()
                .HasIndex(e => new { e.Name, e.Latitude, e.Longitude })
                .IsUnique(true);

            #endregion

            #region many-to-many

            modelBuilder.Entity<ReserveSpecie>()
                .HasOne(e => e.Specie)
                .WithMany(e => e.ReserveSpecies)
                .HasForeignKey(e => e.SpecieId);
            modelBuilder.Entity<ReserveSpecie>()
                .HasOne(e => e.Reserve)
                .WithMany(e => e.ReserveAnimals)
                .HasForeignKey(e => e.ReserveId);

            modelBuilder.Entity<NaturalAreaSpecie>()
                .HasOne(e => e.Specie)
                .WithMany(e => e.NaturalAreaSpecies)
                .HasForeignKey(e => e.SpecieId);
            modelBuilder.Entity<NaturalAreaSpecie>()
                .HasOne(e => e.NaturalArea)
                .WithMany(e => e.NaturalAreaAnimals)
                .HasForeignKey(e => e.NaturalAreaId);

            #endregion

            #region one-to-many

            modelBuilder.Entity<Phylum>()
                .HasMany(e => e.Classes)
                .WithOne(e => e.Phylum)
                .HasForeignKey(e => e.PhylumId)
                .IsRequired(true);

            modelBuilder.Entity<Class>()
                .HasMany(e => e.Orders)
                .WithOne(e => e.Class)
                .HasForeignKey(e => e.ClassId)
                .IsRequired(true);

            modelBuilder.Entity<Order>()
                .HasMany(e => e.Families)
                .WithOne(e => e.Order)
                .HasForeignKey(e => e.OrderId)
                .IsRequired(true);

            modelBuilder.Entity<Family>()
                .HasMany(e => e.Genuses)
                .WithOne(e => e.Family)
                .HasForeignKey(e => e.FamilyId)
                .IsRequired(true);

            modelBuilder.Entity<Genus>()
                .HasMany(e => e.Species)
                .WithOne(e => e.Genus)
                .HasForeignKey(e => e.GenusId)
                .IsRequired(true);

            #endregion
        }

        public DbSet<Phylum> Phylums { get; set; }
        public DbSet<Class> Classes { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<Family> Families { get; set; }
        public DbSet<Genus> Genuses { get; set; }
        public DbSet<Specie> Species { get; set; }

        public DbSet<NaturalArea> NaturalAreas { get; set; }
        public DbSet<NaturalAreaSpecie> NaturalAreaSpecies { get; set; }

        public DbSet<Reserve> Reserves { get; set; }
        public DbSet<ReserveSpecie> ReserveSpecies { get; set; }

    }
}
